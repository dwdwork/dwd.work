/*
* Custom styles for portfolio site
*/
/*--------------------------------------------------------------
# Import Variables
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Define colors
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Define icons
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Define mixins
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Define structure
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Get files for main base
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Normalise
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Site Header
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Define main structure
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Utility Classes: Used to reduce CSS bloat
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Base: Buttons
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Site Footer
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Get typography settings
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Load all fonts
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Baskerville vont
# - https://fonts.adobe.com/fonts/baskerville-pt
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Baskerville vont
# - https://fonts.adobe.com/fonts/century-gothic
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Define base typography
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Get page styles
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Homepage
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# Blog Content
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Page Content
--------------------------------------------------------------*/

/*--------------------------------------------------------------
# All Blocks
--------------------------------------------------------------*/
/*--------------------------------------------------------------
# Block: Project Link
--------------------------------------------------------------*/
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
